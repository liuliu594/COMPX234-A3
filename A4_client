import socket
import time
import os

class UDPClient:
    def __init__(self, server_host, server_port, file_list_path):
        # Initialize the client parameters
        self.server_host = server_host
        self.server_port = int(server_port)
        self.file_list_path = file_list_path
        self.client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.client_socket.settimeout(2)
        self.max_retries = 5
        self.current_timeout = 2000
        self.retry_sleep = 1

    def send_and_receive(self, message, address):
        retries = 0
        while retries <= self.max_retries:
            try:
                self.client_socket.sendto(message.encode(), address)
                response, _ = self.client_socket.recvfrom(65535)
                return response.decode().strip()
            except socket.timeout:
                retries += 1
                wait_time = self.retry_sleep * (2 ** (retries - 1))
                self.current_timeout *= 2
                self.client_socket.settimeout(self.current_timeout / 1000)
                time.sleep(wait_time)
                if retries > self.max_retries:
                    return None
            except (OSError, UnicodeDecodeError) as e:
                print(f"Communication anomaly: {e}")
                return None
    def download_file(self, filename, data_port):
        # Build the file saving path
        desktop = os.path.join(os.path.expanduser("~"), "Desktop")
        save_path = os.path.join(desktop, filename)

        # Make sure the directory exists and is writable
        if not os.path.exists(desktop):
            os.makedirs(desktop)
        if not os.access(desktop, os.W_OK):
            print(f" File{filename} Download failed")
            return False
        download_msg = f"DOWNLOAD {filename}"
        response = self.send_and_receive(download_msg, (self.server_host, self.server_port))

        if not response:#Request to download the file
            print(f"No response from the server was received and the file {filename} download failed")#The server did not respond.
            return False

        file_size = 0
        if response.startswith("OK"):
            parts = response.split()
            try:
                size_pos = parts.index("SIZE") + 1
                port_pos = parts.index("PORT") + 1
                file_size = int(parts[size_pos])
                data_port = int(parts[port_pos])
                print(f"Total file size: {file_size} bytes")
            except (ValueError, IndexError):
                print(f"The server responded with a format error, and the file {filename} failed to download")#Format error
                return False
        elif response.startswith("ERR"):
            print(f"The server file does not exist and the file {filename} has failed to be downloaded")
            return False
        print(f"\nStart downloading the file: {filename}")      #The file does not exist.  