import socket
import sys
import base64
import os
from random import randint
import threading
class UDPServer:
    def __init__(self, port):
        # Initialize the server port
        self.server_port = int(port)
        # Create a UDP socket object
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # Bind the socket to the specified address and port
        self.server_socket.bind(('0.0.0.0', self.server_port))
        # Output the server startup information
        print(f"The server starts up and listens to the port {self.server_port}")
    

    def handle_client(self, filename, client_address):
        try:
            # determine whether the file exists in the current system
            if not os.path.exists(filename):

                # If not, build an error message 
                error_msg = f"ERR {filename} NOT_FOUND"
                self.server_socket.sendto(error_msg.encode(), client_address)
                return
            # get size of file
            file_size = os.path.getsize(filename)
            # select a data port for data transmission
            data_port = randint(50000, 51000)

            # Create a new UDP socket for data transmission
            data_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            # Bind the data socket to the specified address and port
            data_socket.bind(('0.0.0.0', data_port))
            data_socket.settimeout(5)

            # Build the confirmation message and send it to the client
            ok_msg = f"OK {filename} SIZE {file_size} PORT {data_port}"
            self.server_socket.sendto(ok_msg.encode(), client_address)


            # Open the file in binary read mode
            with open(filename, 'rb') as f:
                is_running = True
                while is_running:
                    try:
                        # Receive requests from the client
                        request, _ = data_socket.recvfrom(65535)
                        request_str = request.decode().strip()

                        # Split the request string
                        parts = request_str.split()
                        if len(parts) == 0:
                            continue

                        if parts[0] == "FILE" and parts[-1] == "CLOSE":
                            # Handle the client's closing request
                            close_ok_msg = f"FILE {filename} CLOSE_OK"
                            data_socket.sendto(close_ok_msg.encode(), client_address)
                            is_running = False

                        elif parts[0] == "FILE" and parts[1] == filename and parts[2] == "GET":
                            try:
                                # Find the positions of the starting and ending indexes in the request
                                start_index = parts.index("START") + 1
                                end_index = parts.index("END") + 1
                                start = int(parts[start_index])
                                end = int(parts[end_index])

                                if start < 0 or end >= file_size or start > end:
                                    continue
                                f.seek(start)
                                data = f.read(end - start + 1)
                                if len(data) == 0:
                                    # If the read data is empty, build an error and send it to the client
                                    error_msg = f"ERR {filename} EMPTY_DATA START {start} END {end}"
                                    data_socket.sendto(error_msg.encode(), client_address)
                                    continue
                                base64_data = base64.b64encode(data).decode()

                                # Build the response message and send it to the client
                                response_msg = f"FILE {filename} OK START {start} END {end} DATA {base64_data}"
                                data_socket.sendto(response_msg.encode(), client_address)


                            except (ValueError, IndexError):
                                continue

                    except socket.timeout:
                        continue
                    except Exception:
                        continue

            
            data_socket.close()
        except Exception:
            pass

    def run(self):
        try:
            while True:
                # Receive requests from the client
                request, client_address = self.server_socket.recvfrom(65535)
                request_str = request.decode().strip()

                if request_str.startswith("DOWNLOAD"):
                    #Split the request string
                    parts = request_str.split()
                    if len(parts) >= 2:
                        filename = parts[1]

                        # Create a thread to handle the requests from the client
                        client_thread = threading.Thread(
                            target=self.handle_client,
                            args=(filename, client_address)
                        )
                        client_thread.daemon = True
                        client_thread.start()

        except KeyboardInterrupt:
            print("The server was stopped by the user")
        except Exception:
            pass
        finally:
            self.server_socket.close()
            print("The server has been shut down.") 

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("usage: python server.py 51234")
        sys.exit(1)

    port = sys.argv[1]
    server = UDPServer(port)
    server.run()
            
