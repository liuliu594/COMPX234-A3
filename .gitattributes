import socket
import threading
import time
class TupleSpace:
    def __init__(self):
        self.lock = threading.Lock()
        self.data = {}

    def read(self, key):
        with self.lock:
            return self.data.get(key, None)

    def get(self, key):
        with self.lock:
            return self.data.pop(key, None)

    def put(self, key, value):
        with self.lock:
            if key in self.data:
                return False
            self.data[key] = value
            return True
class Statistics:
    def __init__(self):
        self.lock = threading.Lock()
        self.total_clients = 0
        self.total_operations = 0
        self.read_count = 0
        self.get_count = 0
        self.put_count = 0
        self.errors = {'exists': 0, 'not_exists': 0}
        self.total_key_length = 0
        self.total_value_length = 0
        self.tuple_count = 0

    def increment_clients(self):
        with self.lock:
            self.total_clients += 1

    def increment_ops(self, op_type):
        with self.lock:
            self.total_operations += 1
            if op_type == 'READ':
                self.read_count += 1
            elif op_type == 'GET':
                self.get_count += 1
            elif op_type == 'PUT':
                self.put_count += 1

    def add_error(self, error_type):
        with self.lock:
            if error_type == 'exists':
                self.errors['exists'] += 1
            elif error_type == 'not_exists':
                self.errors['not_exists'] += 1

    def record_tuple_addition(self, key, value):
        with self.lock:
            self.total_key_length += len(key)
            self.total_value_length += len(value)
            self.tuple_count += 1

    def record_tuple_removal(self, key, value):
        with self.lock:
            self.total_key_length -= len(key)
            self.total_value_length -= len(value)
            self.tuple_count -= 1
def handle_client(client_socket, tuple_space, stats):
    try:
         while True:
            header = b''
            while len(header) < 3:
                chunk = client_socket.recv(3 - len(header))
                if not chunk:
                    break
                header += chunk
            if len(header) != 3:
                break
            msg_length = int(header.decode())
            
    except Exception as e:
        print(f"Client error: {e}")
    finally:
        client_socket.close()